// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Status {
  DRAFT
  SCHEDULED
  PUBLISHED
}

enum Platform {
  LinkedIn
  Twitter
  Instagram
  Facebook
}

enum Plan {
  FREE
  BRONZE
  SILVER
  GOLD
  DIAMOND
}

model WebhookEvent {
  id          String   @id
  processedAt DateTime @default(now())
}

// ---------- NextAuth models ----------
model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  brands        BrandInfo[]
  passwordHash  String?

  // R5 fields
  plan        String   @default("FREE")
  trialEndsAt DateTime?
  credits     Int      @default(30) // <- static fallback

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


   stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?   // current active price
  // plan, credits, trialEndsAt already exist
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- App models ----------
model Post {
  id          String    @id @default(cuid())
  day         String
  dateISO     String?
  time        String?
  caption     String
  hashtags    String[] // Postgres text[]
  imageUrl    String
  status      Status
  platform    Platform
  locked      Boolean   @default(false)
  publishedAt DateTime?
  likes       Int?
  comments    Int?
  impressions Int?

  // ðŸ”´ NOW REQUIRED
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([dateISO])
}

model BrandInfo {
  id        String     @id @default(cuid())
  name      String
  niche     String
  tone      String
  platforms Platform[]
  // âœ… one brand per user
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
